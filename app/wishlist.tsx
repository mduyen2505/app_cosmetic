import React, { useState, useEffect } from "react";
import {
  View,
  Text,
  FlatList,
  StyleSheet,
  SafeAreaView,
  ActivityIndicator,
  Alert,
  TouchableOpacity,
} from "react-native";
import { Ionicons } from "@expo/vector-icons";
import AsyncStorage from "@react-native-async-storage/async-storage";
import axios from "axios";
import { useRouter } from "expo-router";
import ProductCard from "../components/ProductCard"; // ‚úÖ Import ProductCard
import { WISHLIST } from "../api/apiconfig"; // ‚úÖ API l·∫•y danh s√°ch y√™u th√≠ch
import { useFocusEffect } from "@react-navigation/native";

export default function WishlistScreen() {
  const [wishlist, setWishlist] = useState<any[]>([]);
  const [wishlistIds, setWishlistIds] = useState<Set<string>>(new Set()); // ‚úÖ L∆∞u danh s√°ch ID y√™u th√≠ch
  const [loading, setLoading] = useState(true);
  const router = useRouter();

  // ‚úÖ L·∫•y danh s√°ch y√™u th√≠ch t·ª´ API khi v√†o trang
  useFocusEffect(
    React.useCallback(() => {
      fetchWishlist();
    }, [])
  );

  const fetchWishlist = async () => {
    try {
      const token = await AsyncStorage.getItem("authToken");
      if (!token) {
        Alert.alert("L·ªói", "B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ xem danh s√°ch y√™u th√≠ch.");
        router.replace("/login");
        return;
      }

      const response = await axios.get(WISHLIST, {
        headers: { Authorization: `Bearer ${token}` },
      });

      if (response.data && response.data.wishlist) {
        setWishlist(response.data.wishlist);
        setWishlistIds(new Set(response.data.wishlist.map((item: any) => item._id))); // ‚úÖ L∆∞u ID y√™u th√≠ch
      } else {
        setWishlist([]);
        setWishlistIds(new Set());
      }
    } catch (error) {
      console.error("L·ªói khi l·∫•y danh s√°ch y√™u th√≠ch:", error);
      setWishlist([]);
      setWishlistIds(new Set());
    } finally {
      setLoading(false);
    }
  };

  // ‚úÖ X√≥a s·∫£n ph·∫©m kh·ªèi danh s√°ch y√™u th√≠ch v√† c·∫≠p nh·∫≠t UI to√†n b·ªô ·ª©ng d·ª•ng
  const removeFromWishlist = async (productId: string) => {
    try {
      const token = await AsyncStorage.getItem("authToken");
      if (!token) return;

      await axios.delete(`${WISHLIST}/remove`, {
        headers: { Authorization: `Bearer ${token}` },
        data: { productId },
      });

      // ‚úÖ C·∫≠p nh·∫≠t danh s√°ch to√†n b·ªô ·ª©ng d·ª•ng
      fetchWishlist();
    } catch (error) {
      console.error("L·ªói khi x√≥a s·∫£n ph·∫©m kh·ªèi danh s√°ch y√™u th√≠ch:", error);
      Alert.alert("L·ªói", "Kh√¥ng th·ªÉ x√≥a s·∫£n ph·∫©m kh·ªèi danh s√°ch y√™u th√≠ch.");
    }
  };

  if (loading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#ff758c" />
        <Text>ƒêang t·∫£i danh s√°ch y√™u th√≠ch...</Text>
      </View>
    );
  }

  return (
    <SafeAreaView style={styles.safeContainer}>
      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity onPress={() => router.back()} style={styles.backButton}>
          <Ionicons name="arrow-back-outline" size={28} color="black" />
        </TouchableOpacity>
        <Text style={styles.headerTitle}>Danh s√°ch y√™u th√≠ch</Text>
        <View style={{ width: 28 }} />
      </View>

      {/* Danh s√°ch y√™u th√≠ch */}
      {wishlist.length === 0 ? (
        <View style={styles.emptyContainer}>
          <Text style={styles.emptyText}>B·∫°n ch∆∞a c√≥ s·∫£n ph·∫©m y√™u th√≠ch n√†o.</Text>
        </View>
      ) : (
        <FlatList
          data={wishlist}
          keyExtractor={(item) => item._id}
          numColumns={2}
          columnWrapperStyle={styles.row}
          renderItem={({ item }) => (
            <ProductCard
              product={item}
              isFavorite={wishlistIds.has(item._id)} // ‚úÖ Lu√¥n hi·ªÉn th·ªã tr√°i tim m√†u ƒë·ªè
              onRemoveFavorite={() => removeFromWishlist(item._id)} // ‚úÖ Th√™m ch·ª©c nƒÉng x√≥a
            />
          )}
        />
      )}
    </SafeAreaView>
  );
}

// üé® **Styles**
const styles = StyleSheet.create({
  safeContainer: { flex: 1, backgroundColor: "#fff" },
  header: {
    flexDirection: "row",
    alignItems: "center",
    paddingHorizontal: 20,
    paddingVertical: 15,
    backgroundColor: "#fff",
    elevation: 3,
  },
  backButton: { padding: 10 },
  headerTitle: {
    fontSize: 20,
    fontWeight: "bold",
    textAlign: "center",
    flex: 1,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
  },
  emptyContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
  },
  emptyText: { fontSize: 16, color: "#777" },
  row: {
    justifyContent: "space-between",
    paddingHorizontal: 15,
  },
});
